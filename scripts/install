#!/bin/sh

config="$1"

if [ "$#" -ne 10 ] || { [ "$config" != "prod" ] && [ "$config" != "dev" ]; }; then
	echo "Usage: $0 {prod|dev} <email> <pass> <root_pass> <admin_pass> <backup_pass> <restore_pass> <php_pass> <jwt_key> <email_status>"
	exit 1
fi

CD=$(pwd)

mysqlAdminHost="localhost"
mysqlAdminUser="admin"
mysqlBackupHost="localhost"
mysqlBackupUser="backup"
mysqlRestoreHost="localhost"
mysqlRestoreUser="restore"
mysqlPhpHost="localhost"
mysqlPhpUser="php"

configPath="$CD/config"

backupsPath="/backup"
scriptsPath="/scripts"
srcPath="$CD/src"
srcApiPath="$srcPath/api"
srcWebPath="$srcPath/web"

dbCreateFile=$configPath/db.sql
dbInitFile=$configPath/init.sql
tmplSitesConfFileProd="$configPath/sites.conf"
tmplSitesConfFileDev="$configPath/sites-dev.conf"
tmplApiConfigFile="$configPath/config.php"
tmplWebConfigFile="$configPath/config.json"
tmplMysqlConfFile="$configPath/linux/my.ini"
tmplMysqlClientConfFile="$configPath/client.ini"
tmplBackup="$CD/scripts/backup"
tmplRestore="$CD/scripts/restore"
tmplDeploy="$CD/scripts/deploy"

#httpd
httpdPortProd=80
httpdPortDev=8080
sitesConfFile="/etc/apache2/sites-available/000-default.conf"
wwwPath="/var/www"
apiPathProd="\${SRVWWW}/api"
apiPathDev="$srcApiPath"

#mysql
mysqlPort=3306
mysqlPath="/etc/mysql"
mysqlConfFile="$mysqlPath/mysql.conf"
mysqlBackupConfFile="$mysqlPath/backup.conf"
mysqlRestoreConfFile="$mysqlPath/restore.conf"
mysqlDataPath="/var/lib/mysql"

apiConfigFileProd="$wwwPath/config/config.php"
apiConfigFileDev="$srcPath/config/config.php"
webConfigFileProd="$wwwPath/config/config.json"
webConfigFileDev="$srcPath/config/config.json"

backup="$scriptsPath/backup"
restore="$scriptsPath/restore"
startProd="$scriptsPath/start"
stopProd="$scriptsPath/stop"
startDev="$scriptsPath/start-dev"
stopDev="$scriptsPath/stop-dev"
deploy="$scriptsPath/deploy"

if [ "$config" = "prod" ]; then
	httpdPort="$httpdPortProd"
	tmplSitesConfFile="$tmplSitesConfFileProd"
	apiPath="$apiPathProd"

        apiConfigFile="$apiConfigFileProd"
        webConfigFIle="$webConfigFileProd"

	start="$startProd"
	stop="$stopProd"
else
	httpdPort="$httpdPortDev"
	tmplSitesConfFile="$tmplSitesConfFileDev"
	apiPath="$apiPathDev"

        apiConfigFile="$apiConfigFileDev"
        webConfigFile="$webConfigFileDev"

	start="$startDev"
	stop="$stopDev"
fi

echo "Installing packages"
apt update
apt install apache2 php libapache2-mod-php8.1 mysql-server php-mysqli sendmail mailutils zip -y

printf "\n-----------------------HTTP----------------------\n"
apache2 -v
if systemctl is-active --quiet apache2; then
        echo "State: running"
else
        echo "State: stopped"
fi

printf "\n-----------------------PHP-----------------------\n"
php -vi

printf "\n------------------------DB-----------------------\n"
mysql -V
if systemctl is-active --quiet mysql; then
	echo "State: running"
else
	echo "State: stopped"
fi

printf "\n-----------------------SMTP----------------------\n"
if systemctl is-active --quiet sendmail; then
        echo "State: running"
else
        echo "State: stopped"
fi

printf "\n-------------------------------------------------\n"

mkdir -p -m 777 "$backupsPath"
mkdir -p -m 755 "$scriptsPath"

#scripts
printf "#!/bin/sh
echo \"Starting HTTP server\"
systemctl start apache2
echo \"Starting MySQL server\"
systemctl start mysql
echo \"Starting Mail server\"
systemctl start sendmail
" >"$start"
if [ "$config" = "dev" ]; then
	printf "gnome-terminal --working-directory=$srcWebPath -- \"npm start\"
" >>"$start"
fi
chmod +x "$start"

printf "#!/bin/sh
echo \"Stopping HTTP server\"
systemctl stop apache2
echo \"Stopping MySQL server\"
systemctl stop mysql
echo \"Stopping Mail server\"
systemctl stop sendmail" >"$stop"
chmod +x "$stop"

#backup
if [ -d "$mysqlDataPath" ] && [ -e "$backup" ] && systemctl is-active --quiet mysql; then
	echo "Creating backup"
	backupPath=$("$backup")
	echo "Backup: $backupPath"
fi

$stop

#config
echo "Configuring HTTP server"
cp "$tmplSitesConfFile" "$sitesConfFile"
sed -i "s;\${APIPATH};$apiPath;g" "$sitesConfFile"
sed -i "s;\${SRVWWW};$wwwPath;g" "$sitesConfFile"
a2enmod rewrite
a2enmod php8.1

echo "Configuring MySQL server"
cp "$tmplMysqlConfFile" "$mysqlConfFile"
sed -i "s;{port};$mysqlPort;g" "$mysqlConfFile"
sed -i "s;{dataPath};$mysqlDataPath;g" "$mysqlConfFile"

cp "$tmplMysqlClientConfFile" "$mysqlBackupConfFile"
sed -i "s;{user};$mysqlBackupUser;g" "$mysqlBackupConfFile"
sed -i "s;{pass};$6;g" "$mysqlBackupConfFile"
sed -i "s;{port};$mysqlPort;g" "$mysqlBackupConfFile"

cp "$tmplMysqlClientConfFile" "$mysqlRestoreConfFile"
sed -i "s;{user};$mysqlRestoreUser;g" "$mysqlRestoreConfFile"
sed -i "s;{pass};$6;g" "$mysqlRestoreConfFile"
sed -i "s;{port};$mysqlPort;g" "$mysqlRestoreConfFile"

#sendmail
echo "Configuring Mail server"
echo "AuthInfo:smtp.gmail.com \"U:$2\" \"P:$3\" \"M:PLAIN\"" >/etc/mail/authinfo
makemap hash /etc/mail/authinfo </etc/mail/authinfo
make -C /etc/mail

#www
echo "Generating www"
rm -rf "${wwwPath:?}/"*
if [ "$config" = "prod" ]; then
	mkdir -p "$wwwPath/api"
	mkdir -p "$wwwPath/web"
else
	cp -r "$srcPath/phpinfo" "$wwwPath/phpinfo"
fi
chmod -R og+w "$wwwPath"

echo "Configuring API"

if [ "$config" = "prod" ]; then
	mkdir -p "$wwwPath/config"

	cp "$tmplApiConfigFile" "$apiConfigFile"
	sed -i "s;{mysqlPhpHost};$mysqlPhpHost;g" "$apiConfigFile"
	sed -i "s;{mysqlPhpUser};$mysqlPhpUser;g" "$apiConfigFile"
	sed -i "s;{mysqlPhpPass};$8;g" "$apiConfigFile"
	sed -i "s;{mysqlPhpPort};$mysqlPort;g" "$apiConfigFile"
	sed -i "s;{jwtKey};$9;g" "$apiConfigFile"

	cp "$tmplWebConfigFile" "$webConfigFile"
	sed -i "s;{apiPort};$httpdPort;g" "$webConfigFile"
fi

mkdir -p "$srcPath/config"

cp "$tmplApiConfigFile" "$apiConfigFileDev"
sed -i "s;{mysqlPhpHost};$mysqlPhpHost;g" "$apiConfigFileDev"
sed -i "s;{mysqlPhpUser};$mysqlPhpUser;g" "$apiConfigFileDev"
sed -i "s;{mysqlPhpPass};$8;g" "$apiConfigFileDev"
sed -i "s;{mysqlPhpPort};$mysqlPort;g" "$apiConfigFileDev"
sed -i "s;{jwtKey};$9;g" "$apiConfigFileDev"

cp "$tmplWebConfigFile" "$webConfigFileDev"
sed -i "s;{apiPort};$httpdPort;g" "$webConfigFileDev"

if [ "$config" = "dev" ]; then
	cd "$srcWebPath" && npm install

	phpmyadminPath="$wwwPath/phpmyadmin"
	#TODO: Copy actual phpmyadmin
	mkdir -p "$phpmyadminPath"
fi

#scripts
cp "$tmplBackup" "$backup"
sed -i "s;{backupPath};$backupsPath;g" "$backup"
sed -i "s;{mysqlDataPath};$mysqlDataPath;g" "$backup"
sed -i "s;{mysqlBackupConfFile};$mysqlBackupConfFile;g" "$backup"
chmod +x "$backup"

cp "$tmplRestore" "$restore"
sed -i "s;{dbCreateFile};$dbCreateFile;g" "$restore"
sed -i "s;{mysqlRestoreConfFile};$mysqlRestoreConfFile;g" "$restore"
chmod +x "$restore"

cp "$tmplDeploy" "$deploy"

#database
echo "Initializing db"
rm -rf "$mysqlDataPath"
mkdir -m 700 "$mysqlDataPath"
chown -R mysql:mysql "$mysqlDataPath"
sudo -u mysql mysqld --initialize-insecure

"$start"

if [ ! -e "$backupPath" ]; then
	echo "Creating db"
	mysql -u root -P $mysqlPort -e "source $dbCreateFile;source $dbInitFile;"
fi

mysqlAdminLogin="$mysqlAdminUser'@'$mysqlAdminHost"
mysqlBackupLogin="$mysqlBackupUser'@'$mysqlBackupHost"
mysqlRestoreLogin="$mysqlRestoreUser'@'$mysqlRestoreHost"
mysqlPhpLogin="$mysqlPhpUser'@'$mysqlPhpHost"

sql="
ALTER USER 'root'@'localhost' IDENTIFIED BY '$4';
CREATE USER '$mysqlAdminLogin' IDENTIFIED BY '$5';
CREATE USER '$mysqlBackupLogin' IDENTIFIED BY '$6';
CREATE USER '$mysqlRestoreLogin' IDENTIFIED BY '$7';
CREATE USER '$mysqlPhpLogin' IDENTIFIED BY '$8';
GRANT PROCESS ON *.* TO '$mysqlAdminLogin';
GRANT SELECT, UPDATE, INSERT, DELETE, LOCK TABLES ON user.* TO '$mysqlAdminLogin';
GRANT SELECT, UPDATE, INSERT, DELETE, LOCK TABLES ON quiz.* TO '$mysqlAdminLogin';
GRANT PROCESS ON *.* TO '$mysqlBackupLogin';
GRANT SELECT, LOCK TABLES ON user.* TO '$mysqlBackupLogin';
GRANT SELECT, LOCK TABLES ON quiz.* TO '$mysqlBackupLogin';
GRANT CREATE, SYSTEM_VARIABLES_ADMIN ON *.* TO '$mysqlRestoreLogin';
GRANT SELECT, UPDATE, INSERT, DELETE, TRIGGER, REFERENCES, DROP ON user.* TO '$mysqlRestoreLogin';
GRANT SELECT, UPDATE, INSERT, DELETE, TRIGGER, REFERENCES, DROP ON quiz.* TO '$mysqlRestoreLogin';
GRANT SELECT, UPDATE, INSERT, DELETE ON user.* TO '$mysqlPhpLogin';
GRANT SELECT, UPDATE, INSERT, DELETE ON quiz.* TO '$mysqlPhpLogin';"

echo "Creating MySQL users"
mysql -u root -P $mysqlPort -e "$sql"

if [ -e "$backupPath" ]; then
	echo "Calling restore"
	$restore "$config" "$backupPath"
fi

echo "Sending email"
echo "Subject: Done" | sudo sendmail -v "${10}"

echo "Done"
